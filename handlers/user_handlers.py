from aiogram import Router, types
from aiogram.client.bot import Bot
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from sqlalchemy import select, delete
from sqlalchemy.orm import selectinload
from sqlalchemy.exc import IntegrityError
from db import SessionLocal, Recipe, User, ShoppingList
from .states import FindRecipeState, ByIngredientsState
from utils import (send_random_recipe, start_search_dialog,
                   process_search_query_and_display_results,
                   send_selected_recipe_by_choice,
                   start_by_ingredients_search,
                   process_search_by_ingredients, from_favorites,
                   send_one_recipe)
from keyboards.inline import (
    main_menu_keyboard, recipe_actions_keyboard,
    favorites_paginated_keyboard,
    shopping_list_actions_keyboard
    )


user_handlers_router = Router()


@user_handlers_router.message(Command('random_recipe'))
async def random_recipe(message: types.Message,
                        state: FSMContext):
    '''–†—É—á–∫–∞ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'''
    send_random_recipe(message, state)


@user_handlers_router.callback_query(
        lambda c: c.data == 'random_recipe_inline'
        )
async def random_recipe_inline(callback: types.CallbackQuery,
                               state: FSMContext):
    await callback.answer()
    await send_random_recipe(callback.message, state)


@user_handlers_router.message(Command('find_recipe'))
async def find_recipe(message: types.Message, state: FSMContext):
    '''–†—É—á–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é'''
    await start_search_dialog(message, state)


@user_handlers_router.callback_query(
        lambda c: c.data == 'find_recipe_inline'
        )
async def find_recipe_inline(callback: types.CallbackQuery,
                             state: FSMContext):
    await callback.answer()
    await start_search_dialog(callback.message, state)


@user_handlers_router.message(FindRecipeState.waiting_for_name)
async def process_recipe_name(message: types.Message, state: FSMContext):
    '''–ü–µ—Ä–≤—ã–π —à–∞–≥ –ø–æ–∏—Å–∫–∞. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤'''
    await process_search_query_and_display_results(message, state)


@user_handlers_router.message(FindRecipeState.waiting_for_choice)
async def process_recipe_choice(message: types.Message, state: FSMContext):
    '''–í—Ç–æ—Ä–æ–π —à–∞–≥ –ø–æ–∏—Å–∫–∞. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —é–∑–µ—Ä–∞'''
    await send_selected_recipe_by_choice(message, state)


@user_handlers_router.message(Command('by_ingredients'))
async def find_recipe_by_ingredients(message: types.Message, state: FSMContext):
    '''–†—É—á–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º'''
    await start_by_ingredients_search(message, state)


@user_handlers_router.callback_query(
        lambda c: c.data == 'by_ingredients_inline'
        )
async def find_recipe_by_ingredients_inline(
    callback: types.CallbackQuery,
    state: FSMContext
):
    await callback.answer()
    await start_by_ingredients_search(callback.message, state)


@user_handlers_router.message(ByIngredientsState.waiting_for_ingredients)
async def process_recipe_ingredients(message: types.Message, state: FSMContext):
    '''–ü–µ—Ä–≤—ã–π —à–∞–≥ –ø–æ–∏—Å–∫–∞. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤'''
    await process_search_by_ingredients(message, state)


@user_handlers_router.message(ByIngredientsState.waiting_for_choice)
async def process_choice(message: types.Message, state: FSMContext):
    '''–í—Ç–æ—Ä–æ–π —à–∞–≥ –ø–æ–∏—Å–∫–∞. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —é–∑–µ—Ä–∞'''
    await send_selected_recipe_by_choice(message, state)


@user_handlers_router.callback_query(
    lambda c: c.data == 'main_menu_inline'
)
async def main_menu_inline(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    keyboard = await main_menu_keyboard(state)
    await callback.message.answer(
        '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=keyboard
        )


@user_handlers_router.callback_query(
    lambda c: c.data == 'favorites_inline'
)
async def favorites_inline(callback: types.CallbackQuery, state: FSMContext):
    await from_favorites(callback, state)


@user_handlers_router.callback_query(
    lambda c: c.data.startswith('add_favorite:')
)
async def add_favorite(
    callback: types.CallbackQuery,
    state: FSMContext,
    bot: Bot
):
    await callback.answer()

    user_id = callback.from_user.id

    try:
        recipe_id = int(callback.data.split(':')[1])
    except (IndexError, ValueError):
        await callback.message.edit_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏.')
        return

    async with SessionLocal() as db:
        user_result = await db.execute(
            select(User).options(
                selectinload(User.favorites_recipes)
            ).where(User.id == user_id)
        )
        recipe_result = await db.execute(
            select(Recipe).where(Recipe.id == recipe_id)
        )

        user = user_result.scalars().first()
        recipe = recipe_result.scalars().first()

        if user and recipe:
            if recipe in user.favorites_recipes:
                # –†–µ—Ü–µ–ø—Ç —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
                await bot.edit_message_reply_markup(
                    chat_id=callback.message.chat.id,
                    message_id=callback.message.message_id,
                    reply_markup=recipe_actions_keyboard(
                        is_favorite=True,
                        recipe_id=recipe_id
                    )
                )
                await callback.answer('–≠—Ç–æ—Ç —Ä–µ—Ü–µ–ø—Ç —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.')
                return

            try:
                user.favorites_recipes.append(recipe)
                await db.commit()
                await bot.edit_message_reply_markup(
                    chat_id=callback.message.chat.id,
                    message_id=callback.message.message_id,
                    reply_markup=recipe_actions_keyboard(
                        is_favorite=True,
                        recipe_id=recipe_id
                    )
                )
                await callback.answer('–†–µ—Ü–µ–ø—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.')
            except IntegrityError:
                await db.rollback() # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
                await callback.answer('–≠—Ç–æ—Ç —Ä–µ—Ü–µ–ø—Ç —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.')
            except Exception as e:
                await db.rollback() # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –ª—é–±—É—é –¥—Ä—É–≥—É—é –æ—à–∏–±–∫—É
                await callback.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}')


@user_handlers_router.callback_query(
    lambda c: c.data.startswith('remove_favorite:')
)
async def remove_favorite(
    callback: types.CallbackQuery,
    state: FSMContext,
    bot: Bot
                        ):
    print("Received callback data:", callback.data)  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø–µ—á–∞—Ç—å
    try:
        parts = callback.data.split(':')
        recipe_id = int(parts[1])
    except (IndexError, ValueError):
        return

    async with SessionLocal() as db:
        user_result = await db.execute(
            select(User)
            .options(selectinload(User.favorites_recipes))
            .where(User.id == callback.from_user.id)
        )
        user = user_result.scalars().first()

        recipe_result = await db.execute(
            select(Recipe).where(Recipe.id == recipe_id)
        )
        recipe = recipe_result.scalars().first()

        if user and recipe and recipe in user.favorites_recipes:
            user.favorites_recipes.remove(recipe)
            await db.commit()

            await db.refresh(user)
            updated_recipes = user.favorites_recipes

            if updated_recipes:
                keyboard = await favorites_paginated_keyboard(
                    updated_recipes, page=0
                    )
                await callback.message.edit_text(
                    '‚≠êÔ∏è –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:\n'
                    '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:',
                    reply_markup=keyboard
                )
            else:
                await callback.message.edit_text(
                    '–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ ü§∑‚Äç‚ôÇÔ∏è',
                    reply_markup=await main_menu_keyboard(state)
                )
        else:
            await callback.message.answer(
                '–≠—Ç–æ—Ç —Ä–µ—Ü–µ–ø—Ç —É–∂–µ –Ω–µ –≤ –≤–∞—à–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–º.'
            )


@user_handlers_router.callback_query(
    lambda c: c.data.startswith('back_to_recipe')
)
async def back_to_recipe(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    try:
        recipe_id = int(callback.data.split(':')[1])
    except (IndexError, ValueError):
        keyboard = await main_menu_keyboard(state)
        await callback.message.answer(
            '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID —Ä–µ—Ü–µ–ø—Ç–∞... –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            reply_markup=keyboard
        )
        return

    async with SessionLocal() as db:
        result = await db.execute(select(Recipe).where(Recipe.id == recipe_id))
        found_recipe = result.scalars().first()

        if found_recipe:
            user_id = callback.from_user.id
            user_result = await db.execute(
                select(User).where(User.id == user_id)
            )
            user = user_result.scalars().first()
            is_favorite = found_recipe in user.favorites_recipes if user else False

            await send_one_recipe(
                callback.message, found_recipe, is_favorite, state
            )

            await state.clear()
        else:
            keyboard = await main_menu_keyboard(state)

            await callback.message.answer(
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞...\n'
                '–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...',
                reply_markup=keyboard
            )


@user_handlers_router.callback_query(
        lambda c: c.data.startswith('view_recipe:')
        )
async def view_recipe(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    try:
        parts = callback.data.split(':')
        recipe_id = int(parts[1])
        page_from_list = int(parts[2])
    except (IndexError, ValueError):
        return

    async with SessionLocal() as db:
        recipe_result = await db.execute(
            select(Recipe).where(Recipe.id == recipe_id)
        )
        found_recipe = recipe_result.scalars().first()

        user_result = await db.execute(
            select(User)
            .options(selectinload(User.favorites_recipes))
            .where(User.id == callback.from_user.id)
        )
        user = user_result.scalars().first()
        is_favorite = found_recipe in user.favorites_recipes if user and found_recipe else False

        if found_recipe:
            await send_one_recipe(
                callback.message,
                found_recipe,
                is_favorite,
                state,
                page=page_from_list
            )

            await state.clear()
        else:
            await callback.message.answer(
                '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ä–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.'
            )


@user_handlers_router.callback_query(
        lambda c: c.data.startswith('favorites_page:')
        )
async def favorites_page_handler(
    callback: types.CallbackQuery, state: FSMContext
                ):
    await callback.answer()

    try:
        page = int(callback.data.split(':')[1])
    except (IndexError, ValueError):
        keyboard = await main_menu_keyboard(state)
        await callback.message.answer(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
            reply_markup=keyboard
        )
        return

    async with SessionLocal() as db:
        user_result = await db.execute(
            select(User).options(selectinload(User.favorites_recipes))
            .where(User.id == callback.from_user.id)
        )
        user = user_result.scalars().first()

    if user and user.favorites_recipes:
        keyboard = await favorites_paginated_keyboard(
            user.favorites_recipes,
            page=page
        )

        await callback.bot.edit_message_reply_markup(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            reply_markup=keyboard
        )
    else:
        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–Ω–µ–∑–∞–ø–Ω–æ —Å—Ç–∞–ª –ø—É—Å—Ç—ã–º
        keyboard = await main_menu_keyboard(state)
        await callback.message.answer(
            '–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ ü§∑‚Äç‚ôÇÔ∏è',
            reply_markup=keyboard
        )


@user_handlers_router.callback_query(
        lambda c: c.data.startswith('add_to_shopping_list')
        )
async def add_to_shopping_list_handler(
    callback: types.CallbackQuery, state: FSMContext
                ):
    await callback.answer('–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫')

    user_id = callback.from_user.id
    try:
        recipe_id = int(callback.data.split(':')[1])
    except (IndexError, ValueError):
        await callback.message.edit_text(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑'
        )
        return

    async with SessionLocal() as db:
        recipe_result = await db.execute(
            select(Recipe).where(Recipe.id == recipe_id)
        )
        found_recipe = recipe_result.scalars().first()

        if found_recipe:
            ingredients_text = found_recipe.ingredients_ru
            ingredients_list = [
                item.strip() for item in ingredients_text.split('\n') if item.strip()
            ]

            for item in ingredients_list:
                new_item = ShoppingList(user_id=user_id, item_name=item)
                db.add(new_item)
            await db.commit()

            await callback.message.answer(
                '–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!',
                reply_markup=await main_menu_keyboard(state)
            )
        else:
            callback.message.answer(
                '–°–æ–∂–∞–ª–µ—é, –Ω–æ —Ä–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω...'
            )


@user_handlers_router.callback_query(
        lambda c: c.data.startswith('view_shopping_list')
        )
async def view_shopping_list_handler(
    callback: types.CallbackQuery, state: FSMContext
                ):
    await callback.answer()

    user_id = callback.from_user.id

    async with SessionLocal() as db:
        shopping_list_result = await db.execute(
            select(ShoppingList).where(
                ShoppingList.user_id == user_id
            )
        )
        shopping_items = shopping_list_result.scalars().all()

        if not shopping_items:
            await callback.message.edit_text(
                '–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ–≥–æ'
                ' –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤',
                reply_markup=await main_menu_keyboard(state)
            )
            return

        items_text = '\n'.join([
            f'~~{item.item_name}~~' if item.is_purchased else f'‚Ä¢ {item.item_name}' 
            for item in shopping_items
        ])
        try:
            await callback.message.edit_text(
                f'<b>üõí –í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫</b>:\n'
                '–ö—É–ø–ª–µ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –æ—Ç–º–µ—á–∞–π—Ç–µ –∫–Ω–æ–ø–∫–æ–π ‚òëÔ∏è '
                '(–¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –µ—â–µ —Ä–∞–∑)\n'
                '–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ (–±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ!), –Ω–∞–∂–º–∏—Ç–µ ‚ùå\n\n'
                f'{items_text}\n\n'
                '–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.',
                reply_markup=await shopping_list_actions_keyboard(
                    shopping_items
                    ),
                parse_mode='HTML'
            )
        except Exception as e:
            await callback.message.answer(
                f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}'
            )


@user_handlers_router.callback_query(
    lambda c: c.data.startswith('clear_shopping_list')
    )
async def clear_shopping_list_handler(
    callback: types.CallbackQuery, state: FSMContext
                ):
    await callback.answer('–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –æ—á–∏—â–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é!')

    user_id = callback.from_user.id

    async with SessionLocal() as db:
        await db.execute(
            delete(ShoppingList).where(ShoppingList.user_id == user_id)
        )
        await db.commit()

        await callback.message.edit_text(
            '–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω! ‚úÖ',
            reply_markup=await main_menu_keyboard(state)
        )


@user_handlers_router.callback_query(
    lambda c: c.data.startswith('toggle_purchased:')
    )
async def toggle_purchased_item(
    callback: types.CallbackQuery, state: FSMContext
        ):
    item_id = int(callback.data.split(':')[1])

    async with SessionLocal() as db:
        item = await db.get(ShoppingList, item_id)
        if item:
            item.is_purchased = not item.is_purchased
            await db.commit()

    await view_shopping_list_handler(callback, state)


@user_handlers_router.callback_query(
    lambda c: c.data.startswith('delete_item:')
)
async def delete_shopping_list_item(callback: types.CallbackQuery, state: FSMContext):
    item_id = int(callback.data.split(':')[1])

    async with SessionLocal() as db:
        await db.execute(
            delete(ShoppingList).where(ShoppingList.id == item_id)
        )
        await db.commit()

    await view_shopping_list_handler(callback, state)
