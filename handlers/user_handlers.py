from aiogram import Router, types
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from sqlalchemy import func, select, or_
from db import SessionLocal, Recipe
from .states import FindRecipeState


user_handlers_router = Router()


@user_handlers_router.message(Command('random_recipe'))
async def random_recipe(message: types.Message):
    '''–†—É—á–∫–∞ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'''
    async with SessionLocal() as db:
        result = await db.execute(select(Recipe).order_by(func.random()).limit(1))
        rand_recipe = result.scalars().first()

        if not rand_recipe:
            await message.answer('''–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é —Ä–µ—Ü–µ–ø—Ç–æ–≤,
                                –Ω–æ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ –∏–∑—É—á–∞—é –∫—É–ª–∏–Ω–∞—Ä–Ω—É—é –∫–Ω–∏–≥—É''')
        caption_text = (
            f'<b>–°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç:</b> {rand_recipe.name_ru}'
        )
        full_recipe_text = (
            '<b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>'
            f'{rand_recipe.ingredients_ru}\n\n'
            '<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é:</b>'
            f'{rand_recipe.instructions_ru}'
        )

        if rand_recipe.image_url:
            await message.answer_photo(
                photo=rand_recipe.image_url,
                caption=caption_text,
                parse_mode=ParseMode.HTML
            )
        else:
            await message.answer(caption_text, parse_mode=ParseMode.HTML)
        await message.answer(full_recipe_text, parse_mode=ParseMode.HTML)


@user_handlers_router.message(Command('find_recipe'))
async def find_recipe(message: types.Message, state: FSMContext):
    '''–†—É—á–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é'''
    await message.answer(
        '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞, —Ä–µ—Ü–µ–ø—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏'
        )
    await state.set_state(FindRecipeState.waiting_for_name)


@user_handlers_router.message(FindRecipeState.waiting_for_name)
async def process_recipe_name(message: types.Message, state: FSMContext):
    async with SessionLocal() as db:
        search_query = message.text
        await message.answer(f'–ò—â—É —Ä–µ—Ü–µ–ø—Ç: "{search_query}"...')

        result = await db.execute(
            select(Recipe)
            .where(
                or_(
                    Recipe.name.like(f'%{search_query}%'),
                    Recipe.name_ru.like(f'%{search_query}%')
                )
            )
        )

        found_recipes = result.scalars().all()

        if found_recipes:
            answ = ['–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã:']
            for i, recipe in enumerate(found_recipes, start=1):
                answ.append(f'{i}. {recipe.name_ru}')

            final_message = '\n'.join(answ)

            await message.answer(final_message)
            await message.answer(
                '–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ –±–ª—é–¥–∞, —Ä–µ—Ü–µ–ø—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—åüçΩ'
                )

            await state.update_data(found_recipes=found_recipes)
            await state.set_state(FindRecipeState.waiting_for_choice)
        else:
            await message.answer('–†–µ—Ü–µ–ø—Ç–æ–≤ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ü§∑‚Äç‚ôÇÔ∏è')
            await state.clear()


@user_handlers_router.message(FindRecipeState.waiting_for_choice)
async def process_recipe_choice(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    found_recipes = user_data.get('found_recipes')

    if not found_recipes:
        await message.answer(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–∞...'
        )
        await state.clear()
        return

    try:
        choice = int(message.text)
        if 1 <= choice <= len(found_recipes):
            selected_recipe = found_recipes[choice - 1]

            caption_text = f'<b>–í—ã –≤—ã–±—Ä–∞–ª–∏:</b> {selected_recipe.name_ru}'
            full_recipe_text = (
                '<b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>\n'
                f'{selected_recipe.ingredients_ru}\n\n'
                '<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n'
                f'{selected_recipe.instructions_ru}'
            )

            if selected_recipe.image_url:
                await message.answer_photo(
                    photo=selected_recipe.image_url,
                    caption=caption_text,
                    parse_mode=ParseMode.HTML
                )
                await message.answer(
                    full_recipe_text,
                    parse_mode=ParseMode.HTML
                    )
            else:
                await message.answer(
                    f'{caption_text}\n\n{full_recipe_text}',
                    parse_mode=ParseMode.HTML
                )
            await state.clear()
        else:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–µ—Ü–µ–ø—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.')
    except ValueError:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!')
