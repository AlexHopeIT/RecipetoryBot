import re
from aiogram import types
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from sqlalchemy import func, select, or_, and_
from sqlalchemy.orm import selectinload
from db import SessionLocal, Recipe, User, favorites_table as favorites
from handlers.states import FindRecipeState, ByIngredientsState
from keyboards.inline import (
    main_menu_keyboard, recipe_actions_keyboard, favorites_paginated_keyboard
    )


async def send_one_recipe(
        event: types.Message | types.CallbackQuery,
        recipe: Recipe, is_favorite: bool, state: FSMContext,
        page: int = None
        ):
    '''–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω —Ä–µ—Ü–µ–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –≤–∫–ª—é—á–∞—è —Ñ–æ—Ç–æ –∏ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç'''
    keyboard = recipe_actions_keyboard(is_favorite, recipe.id)

    caption_text = (
            f'<b>–†–µ—Ü–µ–ø—Ç:</b> {recipe.name_ru}'
        )
    full_recipe_text = (
        '<b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>'
        f'{recipe.ingredients_ru}\n\n'
        '<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é:</b>'
        f'{recipe.instructions_ru}'
    )

    if recipe.image_url:
        await event.answer_photo(
            photo=recipe.image_url,
            caption=caption_text,
            parse_mode=ParseMode.HTML
        )
    else:
        await event.answer(caption_text, parse_mode=ParseMode.HTML,
                           reply_markup=keyboard)
    await event.answer(full_recipe_text, parse_mode=ParseMode.HTML,
                       reply_markup=keyboard)


async def send_random_recipe(event: types.Message | types.CallbackQuery,
                             state: FSMContext):
    '''–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –∏–∑ –ë–î –∏ –≤—ã–∑—ã–≤–∞–µ—Ç send_one_recipe'''
    is_favorite = False
    async with SessionLocal() as db:
        result = await db.execute(select(Recipe).order_by(func.random()).limit(1))
        rand_recipe = result.scalars().first()

        if not rand_recipe:
            await event.answer('''–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é —Ä–µ—Ü–µ–ø—Ç–æ–≤,
                                –Ω–æ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ –∏–∑—É—á–∞—é –∫—É–ª–∏–Ω–∞—Ä–Ω—É—é –∫–Ω–∏–≥—É''')
            return
        await send_one_recipe(event, rand_recipe, is_favorite, state)


async def start_search_dialog(
        event: types.Message | types.CallbackQuery,
        state: FSMContext
        ):
    '''–ó–∞–ø—É—Å–∫ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–∞'''
    await event.answer(
        '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞, —Ä–µ—Ü–µ–ø—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏'
        )
    await state.set_state(FindRecipeState.waiting_for_name)


async def process_search_query_and_display_results(
        message: types.Message, state: FSMContext
        ):
    async with SessionLocal() as db:
        search_query = message.text
        await message.answer(f'–ò—â—É —Ä–µ—Ü–µ–ø—Ç: "{search_query}"...')

        result = await db.execute(
            select(Recipe)
            .where(
                or_(
                    Recipe.name.like(f'%{search_query}%'),
                    Recipe.name_ru.like(f'%{search_query}%')
                )
            )
        )

        found_recipes = result.scalars().all()

        if found_recipes:
            answ = ['–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã:']
            for i, recipe in enumerate(found_recipes, start=1):
                answ.append(f'{i}. {recipe.name_ru}')

            final_message = '\n'.join(answ)

            await message.answer(final_message)
            await message.answer(
                '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –±–ª—é–¥–∞, —Ä–µ—Ü–µ–ø—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—åüçΩ'
                )

            await state.update_data(found_recipes=found_recipes)
            await state.set_state(FindRecipeState.waiting_for_choice)
        else:
            await message.answer('–†–µ—Ü–µ–ø—Ç–æ–≤ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ü§∑‚Äç‚ôÇÔ∏è')
            await state.clear()


async def send_selected_recipe_by_choice(
        message: types.Message, state: FSMContext
        ):
    '''–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—ã–±–æ—Ä –±–ª—é–¥–∞ —é–∑–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ—Ü–µ–ø—Ç'''
    user_data = await state.get_data()
    found_recipes = user_data.get('found_recipes')

    if not found_recipes:
        await message.answer(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–∞...'
        )
        await state.clear()
        return

    try:
        choice = int(message.text)
        if 1 <= choice <= len(found_recipes):
            selected_recipe = found_recipes[choice - 1]
            user_id = message.from_user.id
            recipe_id = selected_recipe.id
            
            async with SessionLocal() as db:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ—Ü–µ–ø—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã–º
                is_favorite_check = await db.execute(
                    select(favorites).where(
                        and_(
                            favorites.c.user_id == user_id,
                            favorites.c.recipe_id == recipe_id
                        )
                    )
                )
                is_favorite = is_favorite_check.first() is not None

            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
            await send_one_recipe(message, selected_recipe, is_favorite, state)
            await state.clear()
        else:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–µ—Ü–µ–ø—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.')
    except ValueError:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!')


async def start_by_ingredients_search(
        event: types.Message | types.CallbackQuery,
        state: FSMContext
        ):
    '''–ó–∞–ø—É—Å–∫ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º'''
    await event.answer(
        '–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É –≤–∞—Å –µ—Å—Ç—å, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é'
    )
    await state.set_state(ByIngredientsState.waiting_for_ingredients)


async def process_search_by_ingredients(
        message: types.Message, state: FSMContext
        ):
    keyboard = main_menu_keyboard(state)
    async with SessionLocal() as db:
        ingredients = message.text
        ingredients_list = [item.strip() for item in ingredients.split(',')]

        search_conditions = []
        for ingredient in ingredients_list:
            search_conditions.append(
                Recipe.ingredients_ru.ilike(f'%{ingredient}%')
                )
        result = await db.execute(
            select(Recipe).where(or_(*search_conditions))
            )

        found_recipes = result.scalars().all()
        if found_recipes:
            answ = ['–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã:']
            for i, recipe in enumerate(found_recipes, start=1):
                answ.append(f'{i}. {recipe.name_ru}')

            final_message = '\n'.join(answ)

            await message.answer(final_message)
            await message.answer(
                '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –±–ª—é–¥–∞, —Ä–µ—Ü–µ–ø—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—åüçΩ'
                )

            await state.update_data(found_recipes=found_recipes)
            await state.set_state(ByIngredientsState.waiting_for_choice)
        else:
            await message.answer('–†–µ—Ü–µ–ø—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ü§∑‚Äç‚ôÇÔ∏è',
                                 reply_markup=keyboard)
            await state.clear()


async def from_favorites(callback: types.CallbackQuery, state: FSMContext):
    '''–ü–æ–ª—É—á–∞–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —é–∑–µ—Ä—É —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤'''
    await callback.answer()

    async with SessionLocal() as db:
        user_id = callback.from_user.id
        result = await db.execute(
            select(User).options(
                selectinload(User.favorites_recipes)
                ).where(User.id == user_id)
            )
        user = result.scalars().first()

        if user and user.favorites_recipes:
            keyboard = await favorites_paginated_keyboard(
                user.favorites_recipes,
                page=0
            )
            await callback.message.answer(
                '‚≠êÔ∏è –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:\n'
                '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—Ü–µ–ø—Ç:',
                reply_markup=keyboard
                )
        else:
            keyboard = await main_menu_keyboard(state)
            await callback.message.answer(
                '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ ü§∑‚Äç‚ôÇÔ∏è',
                reply_markup=keyboard
            )
