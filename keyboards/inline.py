from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from db import Recipe


async def main_menu_keyboard(state: FSMContext):
    '''–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é'''
    builder = InlineKeyboardBuilder()

    builder.button(
        text='üîç –ù–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç',
        callback_data='find_recipe_inline'
        )
    builder.button(
        text='üìú –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç',
        callback_data='random_recipe_inline'
        )
    builder.button(
        text='ü•¶ –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–∞ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º',
        callback_data='by_ingredients_inline'
        )
    builder.button(
        text='‚≠êÔ∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ',
        callback_data='favorites_inline'
        )
    builder.button(
        text='üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫',
        callback_data='view_shopping_list'
        )

    builder.adjust(2, 1, 2)

    user_data = await state.get_data()
    last_recipe_id = user_data.get('last_recipe_id')

    if last_recipe_id:
        builder.button(
            text='üîô –ù–∞–∑–∞–¥',
            callback_data=f'back_to_recipe:{last_recipe_id}'
            )
        builder.adjust(1, 2, 1, 2)

    return builder.as_markup()


def recipe_actions_keyboard(
        is_favorite: bool, recipe_id: int, page: int = None
        ):
    '''–ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä–µ—Ü–µ–ø—Ç–æ–º'''
    builder = InlineKeyboardBuilder()
    if is_favorite:
        builder.button(
            text='‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ',
            callback_data=f'remove_favorite:{recipe_id}'
        )
        builder.button(
            text='üõí –î–æ–±–∞–≤–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫',
            callback_data=f'add_to_shopping_list:{recipe_id}'
        )
    else:
        builder.button(
            text='üíæ –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ',
            callback_data=f'add_favorite:{recipe_id}'
        )

    if page is not None:
        builder.button(
            text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É',
            callback_data=f'favorites_page:{page}'
        )

    builder.button(
            text='‚ìÇÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            callback_data='main_menu_inline'
        )

    builder.adjust(1)
    return builder.as_markup()


async def favorites_paginated_keyboard(
        recipes: list[Recipe], page: int, per_page: int = 5
        ):
    builder = InlineKeyboardBuilder()

    start_index = page * per_page
    end_index = start_index + per_page
    current_recipes = recipes[start_index:end_index]

    for recipe in current_recipes:
        builder.button(
            text=recipe.name_ru,
            callback_data=f'view_recipe:{recipe.id}:{page}'
        )

    builder.adjust(1)

    nav_buttons = []

    next_page_number = page + 1
    previous_page_number = page - 1

    if end_index < len(recipes): 
        nav_buttons.append(InlineKeyboardButton(
            text='–î–∞–ª–µ–µ‚û°Ô∏è',
            callback_data=f'favorites_page:{next_page_number}'
            )
        )

    if page > 0:
        nav_buttons.append(InlineKeyboardButton(
            text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è',
            callback_data=f'favorites_page:{previous_page_number}'
            )
        )

    if nav_buttons:
        builder.row(*nav_buttons)

    builder.button(
        text='‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu_inline'
        )

    return builder.as_markup()


async def shopping_list_actions_keyboard():
    builder = InlineKeyboardBuilder()

    builder.button(
        text='üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫',
        callback_data='clear_shopping_list'
    )

    builder.button(
        text='‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        callback_data='main_menu_inline'
    )
